var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ToneAudioBuffers, ToneBufferSource } from 'tone';
import { PianoComponent } from './Component';
import { randomBetween } from './Util';
var Pedal = /** @class */ (function (_super) {
    __extends(Pedal, _super);
    function Pedal(options) {
        var _this = _super.call(this, options) || this;
        _this._downTime = Infinity;
        _this._currentSound = null;
        _this._downTime = Infinity;
        return _this;
    }
    Pedal.prototype._internalLoad = function () {
        var _this = this;
        return new Promise(function (success) {
            _this._buffers = new ToneAudioBuffers({
                down1: 'pedalD1.mp3',
                down2: 'pedalD2.mp3',
                up1: 'pedalU1.mp3',
                up2: 'pedalU2.mp3',
            }, success, _this.samples);
        });
    };
    /**
     *  Squash the current playing sound
     */
    Pedal.prototype._squash = function (time) {
        if (this._currentSound && this._currentSound.state !== 'stopped') {
            this._currentSound.stop(time);
        }
        this._currentSound = null;
    };
    Pedal.prototype._playSample = function (time, dir) {
        if (this._enabled) {
            this._currentSound = new ToneBufferSource({
                buffer: this._buffers.get("" + dir + (Math.random() > 0.5 ? 1 : 2)),
                context: this.context,
                curve: 'exponential',
                fadeIn: 0.05,
                fadeOut: 0.1,
            }).connect(this.output);
            this._currentSound.start(time, randomBetween(0, 0.01), undefined, 0.1 * randomBetween(0.5, 1));
        }
    };
    /**
     * Put the pedal down
     */
    Pedal.prototype.down = function (time) {
        this._squash(time);
        this._downTime = time;
        this._playSample(time, 'down');
    };
    /**
     * Put the pedal up
     */
    Pedal.prototype.up = function (time) {
        this._squash(time);
        this._downTime = Infinity;
        this._playSample(time, 'up');
    };
    /**
     * Indicates if the pedal is down at the given time
     */
    Pedal.prototype.isDown = function (time) {
        return time > this._downTime;
    };
    return Pedal;
}(PianoComponent));
export { Pedal };
//# sourceMappingURL=Pedal.js.map