var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EventEmitter } from 'events';
import WebMidi from 'webmidi';
var MidiKeyboard = /** @class */ (function (_super) {
    __extends(MidiKeyboard, _super);
    function MidiKeyboard() {
        var _this = _super.call(this) || this;
        _this.connectedDevices = new Map();
        _this.ready = new Promise(function (done, error) {
            WebMidi.enable(function (e) {
                if (e) {
                    error(e);
                }
                WebMidi.addListener('connected', function (event) {
                    if (event.port.type === 'input') {
                        _this._addListeners(event.port);
                    }
                });
                WebMidi.addListener('disconnected', function (event) {
                    _this._removeListeners(event.port);
                });
                done();
            });
        });
        return _this;
    }
    MidiKeyboard.prototype._addListeners = function (device) {
        var _this = this;
        if (!this.connectedDevices.has(device.id)) {
            this.connectedDevices.set(device.id, device);
            device.addListener('noteon', 'all', function (event) {
                _this.emit('keyDown', "" + event.note.name + event.note.octave, event.velocity);
            });
            device.addListener('noteoff', 'all', function (event) {
                _this.emit('keyUp', "" + event.note.name + event.note.octave, event.velocity);
            });
            device.addListener('controlchange', 'all', function (event) {
                if (event.controller.name === 'holdpedal') {
                    _this.emit(event.value ? 'pedalDown' : 'pedalUp');
                }
            });
        }
    };
    MidiKeyboard.prototype._removeListeners = function (event) {
        if (this.connectedDevices.has(event.id)) {
            var device = this.connectedDevices.get(event.id);
            this.connectedDevices.delete(event.id);
            device.removeListener('noteon');
            device.removeListener('noteoff');
            device.removeListener('controlchange');
        }
    };
    return MidiKeyboard;
}(EventEmitter));
export { MidiKeyboard };
//# sourceMappingURL=MidiKeyboard.js.map