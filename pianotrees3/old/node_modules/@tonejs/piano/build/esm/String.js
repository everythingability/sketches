var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Sampler, ToneAudioNode } from 'tone';
import { getNotesUrl } from './Salamander';
/**
 * A single velocity of strings
 */
var PianoString = /** @class */ (function (_super) {
    __extends(PianoString, _super);
    function PianoString(options) {
        var _this = _super.call(this, options) || this;
        _this.name = 'PianoString';
        _this._urls = {};
        // create the urls
        options.notes.forEach(function (note) { return _this._urls[note] = getNotesUrl(note, options.velocity); });
        _this.samples = options.samples;
        return _this;
    }
    PianoString.prototype.load = function () {
        var _this = this;
        return new Promise(function (onload) {
            _this._sampler = _this.output = new Sampler({
                attack: 0,
                baseUrl: _this.samples,
                curve: 'exponential',
                onload: onload,
                release: 0.4,
                urls: _this._urls,
                volume: 3,
            });
        });
    };
    PianoString.prototype.triggerAttack = function (note, time, velocity) {
        this._sampler.triggerAttack(note, time, velocity);
    };
    PianoString.prototype.triggerRelease = function (note, time) {
        this._sampler.triggerRelease(note, time);
    };
    return PianoString;
}(ToneAudioNode));
export { PianoString };
//# sourceMappingURL=String.js.map