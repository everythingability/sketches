var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Midi, Sampler } from 'tone';
import { PianoComponent } from './Component';
import { getHarmonicsInRange, getHarmonicsUrl, inHarmonicsRange } from './Salamander';
import { randomBetween } from './Util';
var Harmonics = /** @class */ (function (_super) {
    __extends(Harmonics, _super);
    function Harmonics(options) {
        var _this = _super.call(this, options) || this;
        _this._urls = {};
        var notes = getHarmonicsInRange(options.minNote, options.maxNote);
        for (var _i = 0, notes_1 = notes; _i < notes_1.length; _i++) {
            var n = notes_1[_i];
            _this._urls[n] = getHarmonicsUrl(n);
        }
        return _this;
    }
    Harmonics.prototype.triggerAttack = function (note, time, velocity) {
        if (this._enabled && inHarmonicsRange(note)) {
            this._sampler.triggerAttack(Midi(note).toNote(), time, velocity * randomBetween(0.5, 1));
        }
    };
    Harmonics.prototype._internalLoad = function () {
        var _this = this;
        return new Promise(function (onload) {
            _this._sampler = new Sampler({
                baseUrl: _this.samples,
                onload: onload,
                urls: _this._urls,
            }).connect(_this.output);
        });
    };
    return Harmonics;
}(PianoComponent));
export { Harmonics };
//# sourceMappingURL=Harmonics.js.map