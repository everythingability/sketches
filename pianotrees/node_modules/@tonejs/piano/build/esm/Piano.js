var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Gain, isString, Midi, optionsFromArguments, ToneAudioNode } from 'tone';
import { Harmonics } from './Harmonics';
import { Keybed } from './Keybed';
import { Pedal } from './Pedal';
import { PianoStrings } from './Strings';
/**
 *  The Piano
 */
var Piano = /** @class */ (function (_super) {
    __extends(Piano, _super);
    function Piano() {
        var _this = _super.call(this, optionsFromArguments(Piano.getDefaults(), arguments)) || this;
        _this.name = 'Piano';
        _this.input = undefined;
        _this.output = new Gain({ context: _this.context });
        /**
         * The currently held notes
         */
        _this._heldNotes = new Map();
        /**
         * If it's loaded or not
         */
        _this._loaded = false;
        var options = optionsFromArguments(Piano.getDefaults(), arguments);
        _this._heldNotes = new Map();
        _this._sustainedNotes = new Map();
        _this._strings = new PianoStrings(Object.assign({}, options, {
            enabled: true,
            volume: options.volume.strings,
        })).connect(_this.output);
        _this.strings = _this._strings.volume;
        _this._pedal = new Pedal(Object.assign({}, options, {
            enabled: options.pedal,
            volume: options.volume.pedal,
        })).connect(_this.output);
        _this.pedal = _this._pedal.volume;
        _this._keybed = new Keybed(Object.assign({}, options, {
            enabled: options.release,
            volume: options.volume.keybed,
        })).connect(_this.output);
        _this.keybed = _this._keybed.volume;
        _this._harmonics = new Harmonics(Object.assign({}, options, {
            enabled: options.release,
            volume: options.volume.harmonics,
        })).connect(_this.output);
        _this.harmonics = _this._harmonics.volume;
        return _this;
    }
    Piano.getDefaults = function () {
        return Object.assign(ToneAudioNode.getDefaults(), {
            maxNote: 108,
            minNote: 21,
            pedal: true,
            release: false,
            samples: './audio/',
            velocities: 1,
            volume: {
                harmonics: 0,
                keybed: 0,
                pedal: 0,
                strings: 0,
            },
        });
    };
    /**
     *  Load all the samples
     */
    Piano.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this._strings.load(),
                            this._pedal.load(),
                            this._keybed.load(),
                            this._harmonics.load(),
                        ])];
                    case 1:
                        _a.sent();
                        this._loaded = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(Piano.prototype, "loaded", {
        /**
         * If all the samples are loaded or not
         */
        get: function () {
            return this._loaded;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Put the pedal down at the given time. Causes subsequent
     *  notes and currently held notes to sustain.
     *  @param time  The time the pedal should go down
     */
    Piano.prototype.pedalDown = function (time) {
        if (this.loaded) {
            time = this.toSeconds(time);
            if (!this._pedal.isDown(time)) {
                this._pedal.down(time);
            }
        }
        return this;
    };
    /**
     *  Put the pedal up. Dampens sustained notes
     *  @param time  The time the pedal should go up
     */
    Piano.prototype.pedalUp = function (time) {
        var _this = this;
        if (this.loaded) {
            var seconds_1 = this.toSeconds(time);
            if (this._pedal.isDown(seconds_1)) {
                this._pedal.up(seconds_1);
                // dampen each of the notes
                this._sustainedNotes.forEach(function (t, note) {
                    if (!_this._heldNotes.has(note)) {
                        _this._strings.triggerRelease(note, seconds_1);
                    }
                });
                this._sustainedNotes.clear();
            }
        }
        return this;
    };
    /**
     *  Play a note.
     *  @param note	  The note to play. If it is a number, it is assumed to be MIDI
     *  @param velocity  The velocity to play the note
     *  @param time	  The time of the event
     */
    Piano.prototype.keyDown = function (note, time, velocity) {
        if (time === void 0) { time = this.immediate(); }
        if (velocity === void 0) { velocity = 0.8; }
        if (this.loaded) {
            time = this.toSeconds(time);
            if (isString(note)) {
                note = Math.round(Midi(note).toMidi());
            }
            if (!this._heldNotes.has(note)) {
                // record the start time and velocity
                this._heldNotes.set(note, { time: time, velocity: velocity });
                this._strings.triggerAttack(note, time, velocity);
            }
        }
        return this;
    };
    /**
     *  Release a held note.
     */
    Piano.prototype.keyUp = function (note, time, velocity) {
        if (time === void 0) { time = this.immediate(); }
        if (velocity === void 0) { velocity = 0.8; }
        if (this.loaded) {
            time = this.toSeconds(time);
            if (isString(note)) {
                note = Math.round(Midi(note).toMidi());
            }
            if (this._heldNotes.has(note)) {
                var prevNote = this._heldNotes.get(note);
                this._heldNotes.delete(note);
                // compute the release velocity
                var holdTime = Math.pow(Math.max(time - prevNote.time, 0.1), 0.7);
                var prevVel = prevNote.velocity;
                var dampenGain = (3 / holdTime) * prevVel * velocity;
                dampenGain = Math.max(dampenGain, 0.4);
                dampenGain = Math.min(dampenGain, 4);
                if (this._pedal.isDown(time)) {
                    if (!this._sustainedNotes.has(note)) {
                        this._sustainedNotes.set(note, time);
                    }
                }
                else {
                    // release the string sound
                    this._strings.triggerRelease(note, time);
                    // trigger the harmonics sound
                    this._harmonics.triggerAttack(note, time, dampenGain);
                }
                // trigger the keybed release sound
                this._keybed.start(note, time, velocity);
            }
        }
        return this;
    };
    Piano.prototype.stopAll = function () {
        var _this = this;
        this.pedalUp();
        this._heldNotes.forEach(function (value, note) {
            _this.keyUp(note);
        });
        return this;
    };
    return Piano;
}(ToneAudioNode));
export { Piano };
//# sourceMappingURL=Piano.js.map