var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ToneAudioBuffers, ToneBufferSource } from 'tone';
import { PianoComponent } from './Component';
import { getReleasesUrl } from './Salamander';
import { randomBetween } from './Util';
var Keybed = /** @class */ (function (_super) {
    __extends(Keybed, _super);
    function Keybed(options) {
        var _this = _super.call(this, options) || this;
        /**
         * The urls to load
         */
        _this._urls = {};
        for (var i = options.minNote; i <= options.maxNote; i++) {
            _this._urls[i] = getReleasesUrl(i);
        }
        return _this;
    }
    Keybed.prototype._internalLoad = function () {
        var _this = this;
        return new Promise(function (success) {
            _this._buffers = new ToneAudioBuffers(_this._urls, success, _this.samples);
        });
    };
    Keybed.prototype.start = function (note, time, velocity) {
        if (this._enabled && this._buffers.has(note)) {
            var source = new ToneBufferSource({
                buffer: this._buffers.get(note),
                context: this.context,
            }).connect(this.output);
            // randomize the velocity slightly
            source.start(time, 0, undefined, 0.015 * velocity * randomBetween(0.5, 1));
        }
    };
    return Keybed;
}(PianoComponent));
export { Keybed };
//# sourceMappingURL=Keybed.js.map